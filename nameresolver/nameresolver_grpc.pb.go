// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: nameresolver.proto

package nameresolver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameResolverClient is the client API for NameResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameResolverClient interface {
	// Sends a greeting
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReplay, error)
	ReverseResolve(ctx context.Context, in *ReverseResolveRequest, opts ...grpc.CallOption) (*ReverseResolveReplay, error)
	GetBlockNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockNumberReply, error)
	GetBlockByNumber(ctx context.Context, in *BlockByNumberRequest, opts ...grpc.CallOption) (*BlockByNumberReplay, error)
}

type nameResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewNameResolverClient(cc grpc.ClientConnInterface) NameResolverClient {
	return &nameResolverClient{cc}
}

func (c *nameResolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReplay, error) {
	out := new(ResolveReplay)
	err := c.cc.Invoke(ctx, "/nameresolver.NameResolver/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameResolverClient) ReverseResolve(ctx context.Context, in *ReverseResolveRequest, opts ...grpc.CallOption) (*ReverseResolveReplay, error) {
	out := new(ReverseResolveReplay)
	err := c.cc.Invoke(ctx, "/nameresolver.NameResolver/ReverseResolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameResolverClient) GetBlockNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockNumberReply, error) {
	out := new(BlockNumberReply)
	err := c.cc.Invoke(ctx, "/nameresolver.NameResolver/GetBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameResolverClient) GetBlockByNumber(ctx context.Context, in *BlockByNumberRequest, opts ...grpc.CallOption) (*BlockByNumberReplay, error) {
	out := new(BlockByNumberReplay)
	err := c.cc.Invoke(ctx, "/nameresolver.NameResolver/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameResolverServer is the server API for NameResolver service.
// All implementations must embed UnimplementedNameResolverServer
// for forward compatibility
type NameResolverServer interface {
	// Sends a greeting
	Resolve(context.Context, *ResolveRequest) (*ResolveReplay, error)
	ReverseResolve(context.Context, *ReverseResolveRequest) (*ReverseResolveReplay, error)
	GetBlockNumber(context.Context, *Empty) (*BlockNumberReply, error)
	GetBlockByNumber(context.Context, *BlockByNumberRequest) (*BlockByNumberReplay, error)
	mustEmbedUnimplementedNameResolverServer()
}

// UnimplementedNameResolverServer must be embedded to have forward compatible implementations.
type UnimplementedNameResolverServer struct {
}

func (UnimplementedNameResolverServer) Resolve(context.Context, *ResolveRequest) (*ResolveReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedNameResolverServer) ReverseResolve(context.Context, *ReverseResolveRequest) (*ReverseResolveReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseResolve not implemented")
}
func (UnimplementedNameResolverServer) GetBlockNumber(context.Context, *Empty) (*BlockNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedNameResolverServer) GetBlockByNumber(context.Context, *BlockByNumberRequest) (*BlockByNumberReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedNameResolverServer) mustEmbedUnimplementedNameResolverServer() {}

// UnsafeNameResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameResolverServer will
// result in compilation errors.
type UnsafeNameResolverServer interface {
	mustEmbedUnimplementedNameResolverServer()
}

func RegisterNameResolverServer(s grpc.ServiceRegistrar, srv NameResolverServer) {
	s.RegisterService(&NameResolver_ServiceDesc, srv)
}

func _NameResolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameresolver.NameResolver/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameResolver_ReverseResolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameResolverServer).ReverseResolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameresolver.NameResolver/ReverseResolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameResolverServer).ReverseResolve(ctx, req.(*ReverseResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameResolver_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameResolverServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameresolver.NameResolver/GetBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameResolverServer).GetBlockNumber(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameResolver_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameResolverServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameresolver.NameResolver/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameResolverServer).GetBlockByNumber(ctx, req.(*BlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameResolver_ServiceDesc is the grpc.ServiceDesc for NameResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nameresolver.NameResolver",
	HandlerType: (*NameResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _NameResolver_Resolve_Handler,
		},
		{
			MethodName: "ReverseResolve",
			Handler:    _NameResolver_ReverseResolve_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _NameResolver_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _NameResolver_GetBlockByNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nameresolver.proto",
}
